package jrm1

import "errors"

// RPC error codes.
const (
	RpcErrorCode_RequestIsNotReadable = -1
	RpcErrorCode_InvalidRequest       = -2
	RpcErrorCode_UnsupportedProtocol  = -4
	RpcErrorCode_UnknownMethod        = -8
	RpcErrorCode_InvalidParameters    = -16
	RpcErrorCode_InternalRpcError     = -32
	//
	RpcErrorCode_ReservedForFuture_1 = -64
	RpcErrorCode_ReservedForFuture_2 = -128
	RpcErrorCode_ReservedForFuture_3 = -256

	// User generated error codes.
	RpcErrorCode_UGEC_Minimal = 1
)

const (
	ErrUnsupportedErrorCode = "unsupported error code"
	ErrFUnknownErrorCode    = "unknown error code: %v"
)

// RpcErrorCode is a code of an RPC error.
type RpcErrorCode int

// Check ensures that error code is a valid error code generated by an RPC
// server. This check refuses error codes having special values for
// user-generated errors.
func (rec RpcErrorCode) Check() (err error) {
	switch rec {
	case RpcErrorCode_RequestIsNotReadable,
		RpcErrorCode_InvalidRequest,
		RpcErrorCode_UnsupportedProtocol,
		RpcErrorCode_UnknownMethod,
		RpcErrorCode_InvalidParameters,
		RpcErrorCode_InternalRpcError,
		RpcErrorCode_ReservedForFuture_1,
		RpcErrorCode_ReservedForFuture_2,
		RpcErrorCode_ReservedForFuture_3:
		return nil
	default:
		return errors.New(ErrUnsupportedErrorCode)
	}
}

// IsGeneratedByUser checks whether the error code is a special value used by
// user-generated errors.
func (rec RpcErrorCode) IsGeneratedByUser() bool {
	if rec >= RpcErrorCode_UGEC_Minimal {
		return true
	}

	return false
}
